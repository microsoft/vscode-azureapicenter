name: Test Execution All Cases (Reusable)

on:
  workflow_call:
    inputs:
      test-cases:
        description: 'JSON array of all test cases to run'
        required: true
        type: string
      python-version:
        description: 'Single Python version to test with'
        required: true
        type: string
    secrets:
      APICEXT_TEST_AZURE_CLIENT_ID:
        required: true
      APICEXT_TEST_AZURE_TENANT_ID:
        required: true
      APICEXT_TEST_AZURE_SUBSCRIPTION_ID:
        required: true
      USERASSIGNED_IDENTITY:
        required: true
      AWS_ACCESS_KEY_LINK:
        required: true
      AWS_SECRET_ACCESS_KEY_LINK:
        required: true

jobs:
  test-all-cases:
    runs-on: ubuntu-latest
    environment: engineering
    strategy:
      fail-fast: false
      matrix:
        test-case: ${{ fromJson(inputs.test-cases) }}
    name: ${{ matrix.test-case }} (Python ${{ inputs.python-version }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.APICEXT_TEST_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.APICEXT_TEST_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install -r ${{ github.workspace }}/requirements.txt
          echo "=== Installed packages verification ==="
          pip list

          echo "=== Azure CLI Development Setup ==="
          azdev setup -r .
          azdev extension add apic-extension

          echo "=== Installing apic-extension in development mode ==="
          cd src/apic-extension
          pip install -e .

      - name: Execute test case
        run: |
          test_case='${{ matrix.test-case }}'
          python_version='${{ inputs.python-version }}'

          echo "Running: $test_case (Python $python_version)"

          cd azure-cli-extensions
          source .venv/bin/activate

          # Set up environment for extension discovery
          export AZURE_EXTENSION_DIR=$(python -c "import site; print(site.getsitepackages()[0])")
          echo "AZURE_EXTENSION_DIR=$AZURE_EXTENSION_DIR"
          export PYTHONPATH="${PYTHONPATH}:$(pwd)/src/apic-extension"
          echo "PYTHONPATH=$PYTHONPATH"

          test_result="FAILED"
          test_start_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          if [ "$test_case" = "full-suite" ]; then
            set +e
            test_output=$(azdev test apic-extension --discover --live 2>&1)
            test_exit_code=$?
            set -e

            echo "$test_output"

            if [ $test_exit_code -eq 0 ] && ! echo "$test_output" | grep -i -E "(failed|error|FAIL)" > /dev/null; then
              test_result="PASSED"
            fi

          else
            set +e
            # Use azdev test for individual test cases with --live mode
            test_output=$(azdev test azext_apic-extension $test_case --discover --live 2>&1)
            test_exit_code=$?
            set -e

            echo "$test_output"

            if [ $test_exit_code -eq 0 ] && ! echo "$test_output" | grep -i -E "(failed|error|FAIL)" > /dev/null; then
              test_result="PASSED"
            fi
          fi

          test_end_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          # Output final result
          if [ "$test_result" = "PASSED" ]; then
            echo "✅ PASSED: $test_case (Python $python_version)"
          else
            echo "❌ FAILED: $test_case (Python $python_version)"
          fi

          # Write result file for aggregation
          cd "$GITHUB_WORKSPACE"
          mkdir -p test-results
          result_file="test-results/result-${python_version}-$(echo "$test_case" | tr '/' '_' | tr ' ' '_').json"
          cat > "$result_file" << EOF
          {
            "test_case": "$test_case",
            "python_version": "$python_version",
            "result": "$test_result",
            "start_time": "$test_start_time",
            "end_time": "$test_end_time",
            "job_id": "${{ github.job }}"
          }
          EOF

          # Exit with error if test failed
          if [ "$test_result" = "FAILED" ]; then
            exit 1
          fi
        env:
          USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
          AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
          AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-python-${{ inputs.python-version }}-${{ matrix.test-case }}
          path: test-results/
          retention-days: 1

    outputs:
      test-case: ${{ matrix.test-case }}
      python-version: ${{ inputs.python-version }}
