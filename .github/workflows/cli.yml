name: CLI weekly live test (Reusable Architecture)

on:
  schedule:
    - cron: "0 18 * * 0"
  workflow_dispatch:
    inputs:
      test-cases:
        description: 'Specific test cases to run. Example: ["test_integration_create_aws", "test_integration_delete"]. Leave empty to run all test cases'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: engineering
    outputs:
      test-case-chunks: ${{ steps.create-chunks.outputs.test-case-chunks }}
      python-versions: ${{ steps.create-chunks.outputs.python-versions }}
      test-cases: ${{ steps.create-chunks.outputs.test-cases }}
      total-chunks: ${{ steps.create-chunks.outputs.total-chunks }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.APICEXT_TEST_AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.APICEXT_TEST_AZURE_TENANT_ID}}
          subscription-id: ${{secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID}}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install azdev
          azdev setup -r .
          azdev extension add apic-extension

      - name: Create test case chunks for reusable workflows
        id: create-chunks
        run: |
          # Check if specific test cases are provided via workflow_dispatch
          inputCases='${{ github.event.inputs.test-cases }}'
          if [ -n "$inputCases" ] && [ "$inputCases" != "null" ]; then
            echo "Using manually specified test cases: $inputCases"
            test_cases="$inputCases"
            total_tests=$(echo "$test_cases" | jq '. | length')
          else
            # Automatically discover test cases using pytest --collect-only
            cd azure-cli-extensions
            source .venv/bin/activate
            cd src/apic-extension

            echo "Discovering test cases using pytest --collect-only..."
            test_collection_output=$(python -m pytest --collect-only -q 2>/dev/null || true)

            # Extract test function names from pytest collection output
            if echo "$test_collection_output" | grep -q "<TestCaseFunction"; then
              test_collection=$(echo "$test_collection_output" | grep -E "^\s*<TestCaseFunction" | sed -E 's/.*<TestCaseFunction ([^>]+)>.*/\1/' | sort | uniq)
            elif echo "$test_collection_output" | grep -q "::test_"; then
              test_collection=$(echo "$test_collection_output" | grep -E "::test_" | sed -E 's/.*::([^:]+)$/\1/' | sort | uniq)
            else
              test_collection=""
            fi

            if [ -n "$test_collection" ]; then
              test_count=$(echo "$test_collection" | wc -l)
              echo "Discovered $test_count test cases"
              test_cases=$(echo "$test_collection" | jq -R -s -c 'split("\n") | map(select(length > 0))')
              total_tests=$(echo "$test_cases" | jq '. | length')
              echo "Found $total_tests test cases total"
            else
              echo "No test cases found, using full-suite approach"
              test_cases='["full-suite"]'
              total_tests=1
            fi
          fi

          # Store test cases for notification job
          echo "test-cases=$test_cases" >> $GITHUB_OUTPUT

          # Python versions to test against
          python_versions='["3.9", "3.10", "3.11", "3.12"]'
          echo "python-versions=$python_versions" >> $GITHUB_OUTPUT

          # For reusable workflows, we need to chunk test cases to stay under matrix limits
          # GitHub has a 256 matrix combination limit per job
          # Since we have 4 Python versions per test case, max test cases per chunk = 60
          max_tests_per_chunk=60

          echo "Creating chunks for $total_tests test cases..."

          if [ "$total_tests" -le "$max_tests_per_chunk" ]; then
            # All tests fit in one chunk
            echo "All $total_tests tests fit in one chunk"
            total_chunks=1
            chunk_matrix=$(jq -n --argjson tests "$test_cases" '[{chunk_id: 0, test_cases: $tests}]')
          else
            # Split into multiple chunks
            total_chunks=$(( (total_tests + max_tests_per_chunk - 1) / max_tests_per_chunk ))
            echo "Splitting $total_tests tests into $total_chunks chunks of up to $max_tests_per_chunk tests each"

            chunk_matrix=$(echo "$test_cases" | jq --argjson chunk_size "$max_tests_per_chunk" '
              [range(0; length; $chunk_size) as $i | {
                chunk_id: ($i / $chunk_size | floor),
                test_cases: .[$i:$i+$chunk_size]
              }]
            ')
          fi

          echo "test-case-chunks=$(echo "$chunk_matrix" | jq -c '.')" >> $GITHUB_OUTPUT
          echo "total-chunks=$total_chunks" >> $GITHUB_OUTPUT

          # Debug output
          echo "DEBUG: Created $total_chunks chunks:"
          echo "$chunk_matrix" | jq -r '.[] | "  Chunk \(.chunk_id): \(.test_cases | length) test cases"'  # Execute all test cases using reusable workflow with dynamic chunking

  execute-tests:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        chunk: ${{ fromJson(needs.setup.outputs.test-case-chunks) }}
        include: ${{ fromJson(needs.setup.outputs.test-case-chunks) }}
    name: Execute Chunk ${{ matrix.chunk.chunk_id }}
    uses: ./.github/workflows/apic-cli/test-execution-chunk.yml
    with:
      test-cases: ${{ toJson(matrix.chunk.test_cases) }}
      python-versions: ${{ needs.setup.outputs.python-versions }}
      chunk-id: ${{ matrix.chunk.chunk_id }}
    secrets:
      APICEXT_TEST_AZURE_CLIENT_ID: ${{ secrets.APICEXT_TEST_AZURE_CLIENT_ID }}
      APICEXT_TEST_AZURE_TENANT_ID: ${{ secrets.APICEXT_TEST_AZURE_TENANT_ID }}
      APICEXT_TEST_AZURE_SUBSCRIPTION_ID: ${{ secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID }}
      USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
      AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
      AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

  # Send notification using reusable workflow
  notify:
    needs: [setup, execute-tests]
    if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && !cancelled()
    uses: ./.github/workflows/apic-cli/notification.yml
    with:
      test-cases: ${{ needs.setup.outputs.test-cases }}
      python-versions: ${{ needs.setup.outputs.python-versions }}
      workflow-run-id: ${{ github.run_id }}
      repository: ${{ github.repository }}
      server-url: ${{ github.server_url }}
      ref-name: ${{ github.ref_name }}
      event-name: ${{ github.event_name }}
      run-attempt: ${{ github.run_attempt }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AUTHOR_MAIL_ADDRESSES: ${{ secrets.AUTHOR_MAIL_ADDRESSES }}
      MAIL_CLIENT_ID: ${{ secrets.MAIL_CLIENT_ID }}
      MAIL_CLIENT_SECRET: ${{ secrets.MAIL_CLIENT_SECRET }}
      MAIL_TENANT_ID: ${{ secrets.MAIL_TENANT_ID }}
