name: CLI weekly live test

on:
  schedule:
    - cron: "0 18 * * 0"
  workflow_dispatch:
    inputs:
      test-cases:
        description: 'Specific test cases to run. Example: ["test_integration_create_aws", "test_integration_delete"]. Leave empty to run all test cases'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: engineering
    outputs:
      test-cases: ${{ steps.list-cases.outputs.test-cases }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.APICEXT_TEST_AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.APICEXT_TEST_AZURE_TENANT_ID}}
          subscription-id: ${{secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID}}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install azdev
          azdev setup -r .
          azdev extension add apic-extension

      - name: Discover test cases
        id: list-cases
        run: |
          # Check if specific test cases are provided via workflow_dispatch
          inputCases='${{ github.event.inputs.test-cases }}'
          if [ -n "$inputCases" ] && [ "$inputCases" != "null" ]; then
            echo "test-cases=$inputCases" >> $GITHUB_OUTPUT
            echo "Using manually specified test cases: $inputCases"
          else
            # Automatically discover test cases using pytest --collect-only
            cd azure-cli-extensions
            source .venv/bin/activate
            cd src/apic-extension

            echo "Discovering test cases using pytest --collect-only..."

            # Use pytest to collect all test cases and extract test function names
            # Run pytest from the apic-extension directory to ensure proper discovery
            test_collection_output=$(python -m pytest --collect-only -q 2>/dev/null || true)

            echo "Raw pytest output:"
            echo "$test_collection_output"

            # Extract test function names from pytest collection output
            # Handle both formats: <TestCaseFunction name> and path::Class::test_name
            if echo "$test_collection_output" | grep -q "<TestCaseFunction"; then
              # Format: <TestCaseFunction test_name>
              test_collection=$(echo "$test_collection_output" | grep -E "^\s*<TestCaseFunction" | sed -E 's/.*<TestCaseFunction ([^>]+)>.*/\1/' | sort | uniq)
            elif echo "$test_collection_output" | grep -q "::test_"; then
              # Format: path/file.py::ClassName::test_name
              test_collection=$(echo "$test_collection_output" | grep -E "::test_" | sed -E 's/.*::([^:]+)$/\1/' | sort | uniq)
            else
              # No recognized format found
              test_collection=""
            fi

            if [ -n "$test_collection" ]; then
              test_count=$(echo "$test_collection" | wc -l)
              echo "Discovered $test_count test cases:"
              echo "$test_collection"
              # Convert to JSON array format (compact, single-line)
              test_cases=$(echo "$test_collection" | jq -R -s -c 'split("\n") | map(select(length > 0))')
              total_tests=$(echo "$test_cases" | jq '. | length')
              echo "Found $total_tests test cases"

              # Since we have 4 Python versions and need to stay under 256 limit per job,
              max_cases_per_job=256

              if [ "$total_tests" -le "$max_cases_per_job" ]; then
                # All test cases can fit in one batch for each Python version
                echo "test-cases=$test_cases" >> $GITHUB_OUTPUT
                echo "Using all $total_tests test cases for each Python version"
              else
                # Too many test cases, need to use full test suite approach
                echo "Too many test cases ($total_tests > $max_cases_per_job), using full test suite"
                echo "test-cases=[]" >> $GITHUB_OUTPUT
              fi
            else
              echo "No test cases found using pytest --collect-only"
              echo "This will trigger full test suite execution instead"
              # Fallback to empty array to trigger full test suite
              echo "test-cases=[]" >> $GITHUB_OUTPUT
            fi
          fi

  execute-test-case-py39:
    needs: setup
    runs-on: ubuntu-latest
    environment: engineering
    strategy:
      fail-fast: false
      matrix:
        # Use discovered test cases if available, otherwise use a single placeholder
        test-case: ${{ fromJson(needs.setup.outputs.test-cases != '[]' && needs.setup.outputs.test-cases || '["full-suite"]') }}
    name: ${{ matrix.test-case == 'full-suite' && 'Run Full Test Suite (Python 3.9)' || format('{0} (Python 3.9)', matrix.test-case) }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.APICEXT_TEST_AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.APICEXT_TEST_AZURE_TENANT_ID}}
          subscription-id: ${{secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID}}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install azdev
          azdev setup -r .
          azdev extension add apic-extension

      - name: Run tests
        run: |
          cd azure-cli-extensions
          source .venv/bin/activate
          if [ "${{ matrix.test-case }}" = "full-suite" ]; then
            echo "Running full test suite..."
            azdev test apic-extension --discover --live
          else
            echo "Running individual test case: ${{ matrix.test-case }}"
            azdev test azext_apic-extension ${{ matrix.test-case }} --discover --live
          fi
        env:
          USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
          AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
          AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}
  execute-test-case-py310:
    needs: setup
    runs-on: ubuntu-latest
    environment: engineering
    strategy:
      fail-fast: false
      matrix:
        # Use discovered test cases if available, otherwise use a single placeholder
        test-case: ${{ fromJson(needs.setup.outputs.test-cases != '[]' && needs.setup.outputs.test-cases || '["full-suite"]') }}
    name: ${{ matrix.test-case == 'full-suite' && 'Run Full Test Suite (Python 3.10)' || format('{0} (Python 3.10)', matrix.test-case) }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.APICEXT_TEST_AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.APICEXT_TEST_AZURE_TENANT_ID}}
          subscription-id: ${{secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID}}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install azdev
          azdev setup -r .
          azdev extension add apic-extension

      - name: Run tests
        run: |
          cd azure-cli-extensions
          source .venv/bin/activate
          if [ "${{ matrix.test-case }}" = "full-suite" ]; then
            echo "Running full test suite..."
            azdev test apic-extension --discover --live
          else
            echo "Running individual test case: ${{ matrix.test-case }}"
            azdev test azext_apic-extension ${{ matrix.test-case }} --discover --live
          fi
        env:
          USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
          AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
          AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}
  execute-test-case-py311:
    needs: setup
    runs-on: ubuntu-latest
    environment: engineering
    strategy:
      fail-fast: false
      matrix:
        # Use discovered test cases if available, otherwise use a single placeholder
        test-case: ${{ fromJson(needs.setup.outputs.test-cases != '[]' && needs.setup.outputs.test-cases || '["full-suite"]') }}
    name: ${{ matrix.test-case == 'full-suite' && 'Run Full Test Suite (Python 3.11)' || format('{0} (Python 3.11)', matrix.test-case) }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.APICEXT_TEST_AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.APICEXT_TEST_AZURE_TENANT_ID}}
          subscription-id: ${{secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID}}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install azdev
          azdev setup -r .
          azdev extension add apic-extension

      - name: Run tests
        run: |
          cd azure-cli-extensions
          source .venv/bin/activate
          if [ "${{ matrix.test-case }}" = "full-suite" ]; then
            echo "Running full test suite..."
            azdev test apic-extension --discover --live
          else
            echo "Running individual test case: ${{ matrix.test-case }}"
            azdev test azext_apic-extension ${{ matrix.test-case }} --discover --live
          fi
        env:
          USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
          AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
          AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

  execute-test-case-py312:
    needs: setup
    runs-on: ubuntu-latest
    environment: engineering
    strategy:
      fail-fast: false
      matrix:
        # Use discovered test cases if available, otherwise use a single placeholder
        test-case: ${{ fromJson(needs.setup.outputs.test-cases != '[]' && needs.setup.outputs.test-cases || '["full-suite"]') }}
    name: ${{ matrix.test-case == 'full-suite' && 'Run Full Test Suite (Python 3.12)' || format('{0} (Python 3.12)', matrix.test-case) }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.APICEXT_TEST_AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.APICEXT_TEST_AZURE_TENANT_ID}}
          subscription-id: ${{secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID}}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install azdev
          azdev setup -r .
          azdev extension add apic-extension

      - name: Run tests
        run: |
          cd azure-cli-extensions
          source .venv/bin/activate
          if [ "${{ matrix.test-case }}" = "full-suite" ]; then
            echo "Running full test suite..."
            azdev test apic-extension --discover --live
          else
            echo "Running individual test case: ${{ matrix.test-case }}"
            azdev test azext_apic-extension ${{ matrix.test-case }} --discover --live
          fi
        env:
          USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
          AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
          AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

  notify:
    needs: [setup, execute-test-case-py39, execute-test-case-py310, execute-test-case-py311, execute-test-case-py312]
    if: always() && !cancelled() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: engineering
    steps:
      - name: Generate Email Content
        id: generate-email-content
        run: |
          # Get the test cases that were executed across all Python versions
          test_cases='${{ needs.setup.outputs.test-cases }}'

          # Initialize report variables
          total_jobs=0
          passed_jobs=0
          failed_jobs=0
          passed_tests=""
          failed_tests=""

          # Fetch individual job results using GitHub API
          page=1
          jobs="[]"

          while :
          do
            url="https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs?per_page=100&page=$page"
            resp=$(curl -H "Accept: application/vnd.github.v3+json" -u:${{ secrets.GITHUB_TOKEN }} "$url")
            new_jobs=$(echo "$resp" | jq -cr '.jobs')
            jobs=$(jq -cr --slurp 'add' <(echo "$jobs") <(echo "$new_jobs"))

            has_next=$(curl -I -H "Accept: application/vnd.github.v3+json" -u:${{ secrets.GITHUB_TOKEN }} "$url" | grep -Fi "link:" | grep "rel=\"last\"" || true)
            if [ -z "$has_next" ]; then
              break
            fi
            page=$((page+1))
          done

          # Define Python versions
          declare -a python_versions=("3.9" "3.10" "3.11" "3.12")

          # Process results for each Python version job
          if [ "$test_cases" = "[]" ]; then
            # Full suite was run for each Python version
            for python_version in "${python_versions[@]}"; do
              job_name="Run Full Test Suite (Python ${python_version})"
              job_result=$(echo "$jobs" | jq -r --arg name "$job_name" '.[] | select(.name == $name) | .conclusion')

              total_jobs=$((total_jobs + 1))
              if [ "$job_result" = "success" ]; then
                passed_jobs=$((passed_jobs + 1))
                if [ -z "$passed_tests" ]; then
                  passed_tests="$job_name"
                else
                  passed_tests="${passed_tests}"$'\n'"${job_name}"
                fi
              else
                failed_jobs=$((failed_jobs + 1))
                if [ -z "$failed_tests" ]; then
                  failed_tests="$job_name"
                else
                  failed_tests="${failed_tests}"$'\n'"${job_name}"
                fi
              fi
            done
          else
            # Individual test cases were run for each Python version
            test_case_array=$(echo "$test_cases" | jq -r '.[]')

            for python_version in "${python_versions[@]}"; do
              for test_case in $test_case_array; do
                total_jobs=$((total_jobs + 1))

                # Find job by exact name match (includes Python version)
                job_name="${test_case} (Python ${python_version})"
                job_result=$(echo "$jobs" | jq -r --arg name "$job_name" '.[] | select(.name == $name) | .conclusion')

                if [ "$job_result" = "success" ]; then
                  passed_jobs=$((passed_jobs + 1))
                  if [ -z "$passed_tests" ]; then
                    passed_tests="$job_name"
                  else
                    passed_tests="${passed_tests}"$'\n'"${job_name}"
                  fi
                else
                  failed_jobs=$((failed_jobs + 1))
                  if [ -z "$failed_tests" ]; then
                    failed_tests="$job_name"
                  else
                    failed_tests="${failed_tests}"$'\n'"${job_name}"
                  fi
                fi
              done
            done
          fi

          # Generate email subject
          if [ $failed_jobs -eq 0 ]; then
            subject="[APICENTER] Weekly APIC Extension Live Test - All Tests Passed ✅"
          else
            subject="[APICENTER] Weekly APIC Extension Live Test - $failed_jobs/$total_jobs Tests Failed ❌"
          fi

          # Generate HTML email body with proper formatting
          body="<html><body>"
          body="${body}<h2>APIC Extension Live Test Report</h2>"
          body="${body}<h3>📊 Summary:</h3>"
          body="${body}<ul>"
          body="${body}<li><strong>Total Test Cases:</strong> $total_jobs</li>"
          body="${body}<li><strong>Passed:</strong> $passed_jobs</li>"
          body="${body}<li><strong>Failed:</strong> $failed_jobs</li>"

          if [ $total_jobs -gt 0 ]; then
            success_rate=$(( (passed_jobs * 100) / total_jobs ))
            body="${body}<li><strong>Success Rate:</strong> ${success_rate}%</li>"
          fi
          body="${body}</ul>"

          if [ -n "$failed_tests" ]; then
            body="${body}<h3>❌ Failed Tests:</h3><ul>"
            while IFS= read -r test; do
              if [ -n "$test" ]; then
                body="${body}<li>${test}</li>"
              fi
            done <<< "$failed_tests"
            body="${body}</ul>"
          fi

          if [ -n "$passed_tests" ]; then
            body="${body}<h3>✅ Passed Tests:</h3><ul>"
            while IFS= read -r test; do
              if [ -n "$test" ]; then
                body="${body}<li>${test}</li>"
              fi
            done <<< "$passed_tests"
            body="${body}</ul>"
          fi

          body="${body}<h3>🔗 Workflow Details:</h3>"
          body="${body}<ul>"
          body="${body}<li><strong>Workflow URL:</strong> <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">View Workflow Run</a></li>"
          body="${body}<li><strong>Repository:</strong> ${{ github.repository }}</li>"
          body="${body}<li><strong>Branch:</strong> ${{ github.ref_name }}</li>"
          body="${body}<li><strong>Triggered by:</strong> ${{ github.event_name }}</li>"
          body="${body}<li><strong>Run ID:</strong> ${{ github.run_id }}</li>"
          body="${body}<li><strong>Run Attempt:</strong> ${{ github.run_attempt }}</li>"
          body="${body}</ul>"
          body="${body}</body></html>"

          # Set environment variables for outputs
          echo "to=${{ secrets.AUTHOR_MAIL_ADDRESSES }}" >> $GITHUB_ENV
          echo "subject=$subject" >> $GITHUB_ENV
          echo "body=$body" >> $GITHUB_ENV

      - name: Send Email Notification
        run: |
          response=$(curl \
            --request POST \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data "grant_type=client_credentials&client_id=${{ secrets.MAIL_CLIENT_ID }}&client_secret=${{ secrets.MAIL_CLIENT_SECRET }}&resource=https://management.core.windows.net" \
            "https://login.microsoftonline.com/${{ secrets.MAIL_TENANT_ID }}/oauth2/token")

          access_token=$(echo $response | jq -r '. | select(.access_token) | .access_token')

          curl \
            --request POST \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $access_token" \
            --data "{\"to\": \"${{ env.to }}\", \"body\": \"${{ env.body }}\", \"subject\": \"${{ env.subject }}\"}" \
            'https://prod-18.northcentralus.logic.azure.com:443/workflows/b33d7861bfc64832a6f62cc8f2213988/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0'
        shell: bash
