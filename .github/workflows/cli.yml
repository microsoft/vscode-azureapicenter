name: CLI weekly live test (Simplified Architecture)

on:
  schedule:
    - cron: "0 18 * * 0"
  workflow_dispatch:
    inputs:
      test-cases:
        description: 'Specific test cases to run. Example: ["test_integration_create_aws", "test_integration_delete"]. Leave empty to run all test cases'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: engineering
    outputs:
      test-cases: ${{ steps.discover-tests.outputs.test-cases }}
      python-versions: ${{ steps.discover-tests.outputs.python-versions }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.APICEXT_TEST_AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.APICEXT_TEST_AZURE_TENANT_ID}}
          subscription-id: ${{secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID}}
          enable-AzPSSession: true

      - name: Clone azure-cli-extensions repository
        run: |
          git clone https://github.com/blackchoey/azure-cli-extensions.git
          cd azure-cli-extensions
          git checkout main

      - name: Setup development environment
        run: |
          cd azure-cli-extensions
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install azdev
          azdev setup -r .
          azdev extension add apic-extension

      - name: Discover test cases and set outputs
        id: discover-tests
        run: |
          cd azure-cli-extensions
          source .venv/bin/activate

          # Check if specific test cases are provided
          test_input='${{ inputs.test-cases }}'
          if [ -n "$test_input" ] && [ "$test_input" != "null" ] && [ "$test_input" != "" ]; then
            echo "Using specific test cases from input: $test_input"
            test_cases="$test_input"
          else
            echo "Discovering all test cases..."
            # Get all test cases by discovering them
            test_collection=$(azdev test azext_apic-extension --discover 2>/dev/null | grep -E '^test_' | sort | uniq || true)

            if [ -z "$test_collection" ]; then
              echo "No individual test cases found, using full-suite approach"
              test_cases='["full-suite"]'
            else
              test_count=$(echo "$test_collection" | wc -l)
              echo "Discovered $test_count test cases"
              test_cases=$(echo "$test_collection" | jq -R -s -c 'split("\n") | map(select(length > 0))')
              total_tests=$(echo "$test_cases" | jq '. | length')
              echo "Found $total_tests test cases total"
            fi
          fi

          echo "test-cases=$test_cases" >> $GITHUB_OUTPUT

          # Python versions to test against
          python_versions='["3.9", "3.10", "3.11", "3.12"]'
          echo "python-versions=$python_versions" >> $GITHUB_OUTPUT  # Execute tests for each Python version using reusable workflow

  test-python-39:
    needs: setup
    uses: ./.github/workflows/test-execution-all.yml
    with:
      test-cases: ${{ needs.setup.outputs.test-cases }}
      python-version: "3.9"
    secrets:
      APICEXT_TEST_AZURE_CLIENT_ID: ${{ secrets.APICEXT_TEST_AZURE_CLIENT_ID }}
      APICEXT_TEST_AZURE_TENANT_ID: ${{ secrets.APICEXT_TEST_AZURE_TENANT_ID }}
      APICEXT_TEST_AZURE_SUBSCRIPTION_ID: ${{ secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID }}
      USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
      AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
      AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

  test-python-310:
    needs: setup
    uses: ./.github/workflows/test-execution-all.yml
    with:
      test-cases: ${{ needs.setup.outputs.test-cases }}
      python-version: "3.10"
    secrets:
      APICEXT_TEST_AZURE_CLIENT_ID: ${{ secrets.APICEXT_TEST_AZURE_CLIENT_ID }}
      APICEXT_TEST_AZURE_TENANT_ID: ${{ secrets.APICEXT_TEST_AZURE_TENANT_ID }}
      APICEXT_TEST_AZURE_SUBSCRIPTION_ID: ${{ secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID }}
      USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
      AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
      AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

  test-python-311:
    needs: setup
    uses: ./.github/workflows/test-execution-all.yml
    with:
      test-cases: ${{ needs.setup.outputs.test-cases }}
      python-version: "3.11"
    secrets:
      APICEXT_TEST_AZURE_CLIENT_ID: ${{ secrets.APICEXT_TEST_AZURE_CLIENT_ID }}
      APICEXT_TEST_AZURE_TENANT_ID: ${{ secrets.APICEXT_TEST_AZURE_TENANT_ID }}
      APICEXT_TEST_AZURE_SUBSCRIPTION_ID: ${{ secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID }}
      USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
      AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
      AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

  test-python-312:
    needs: setup
    uses: ./.github/workflows/test-execution-all.yml
    with:
      test-cases: ${{ needs.setup.outputs.test-cases }}
      python-version: "3.12"
    secrets:
      APICEXT_TEST_AZURE_CLIENT_ID: ${{ secrets.APICEXT_TEST_AZURE_CLIENT_ID }}
      APICEXT_TEST_AZURE_TENANT_ID: ${{ secrets.APICEXT_TEST_AZURE_TENANT_ID }}
      APICEXT_TEST_AZURE_SUBSCRIPTION_ID: ${{ secrets.APICEXT_TEST_AZURE_SUBSCRIPTION_ID }}
      USERASSIGNED_IDENTITY: ${{ secrets.USERASSIGNED_IDENTITY }}
      AWS_ACCESS_KEY_LINK: ${{ secrets.AWS_ACCESS_KEY_LINK }}
      AWS_SECRET_ACCESS_KEY_LINK: ${{ secrets.AWS_SECRET_ACCESS_KEY_LINK }}

  # Send notification using reusable workflow
  notify:
    needs: [setup, test-python-39, test-python-310, test-python-311, test-python-312]
    if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && !cancelled()
    uses: ./.github/workflows/notification.yml
    with:
      test-cases: ${{ needs.setup.outputs.test-cases }}
      python-versions: ${{ needs.setup.outputs.python-versions }}
      workflow-run-id: ${{ github.run_id }}
      repository: ${{ github.repository }}
      server-url: ${{ github.server_url }}
      ref-name: ${{ github.ref_name }}
      event-name: ${{ github.event_name }}
      run-attempt: ${{ github.run_attempt }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AUTHOR_MAIL_ADDRESSES: ${{ secrets.AUTHOR_MAIL_ADDRESSES }}
      MAIL_CLIENT_ID: ${{ secrets.MAIL_CLIENT_ID }}
      MAIL_CLIENT_SECRET: ${{ secrets.MAIL_CLIENT_SECRET }}
      MAIL_TENANT_ID: ${{ secrets.MAIL_TENANT_ID }}
