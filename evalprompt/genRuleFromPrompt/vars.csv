userprompt
"This rule ensures that path parameter names in your API follow camelCase format. Starts with a lowercase letter, e.g., userId. Only letters and numbers after the first letter, e.g., order123. Examples of invalid names: UserId (uppercase start), order_id (underscores), 123user (starts with a number). this is a warning rule"
"This rule enforces that GET requests must not have a body parameter.It scans all parameters in GET requests and checks if any are labeled as body.If it finds a body parameter, it raises an error because GET requests should only use query or header parameters, not a body.In short: GET requests = no body allowed."
"This rule ensures that file extensions (like .json, .xml, .html, and .txt) should not appear in API paths. It checks all paths in your API and looks for any that end with these extensions. If a path contains such an extension, it raises an error. In short: No file extensions in API paths—use the content keyword for media types."
"This rule ensures that all APIs must have a security scheme defined. It checks the components section of your OpenAPI 3.x definition for the presence of securitySchemes. If no securitySchemes are defined, it raises an error because it means the API is completely open to the public. In short: Define a security scheme to protect your API and better manage its usage."
"This rule ensures that every operation in an API must include a summary.What it checks: It looks at all HTTP methods (GET, PUT, POST, etc.) defined under API paths.What it enforces: Each operation must have a summary field, which provides a concise description of what the operation does.What happens if it’s missing: An error is raised if the summary field is not defined for any operation. In short: Always include a summary for every operation to describe its purpose succinctly."
"This rule ensures that the example field should not be used for individual response body fields, as the example should represent the entire schema instead.What it checks: It inspects the response body schemas for types like object, array, integer, boolean, or string.What it enforces: The example field must not be defined for these individual fields.What happens if it’s present: A warning is raised to remind you to use the example at the schema level rather than for specific fields.In short: Define response examples at the schema level, not for individual fields."
